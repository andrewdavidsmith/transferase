/* MIT License
 *
 * Copyright (c) 2024 Andrew D Smith
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef LIB_GENOME_INDEX_HPP_
#define LIB_GENOME_INDEX_HPP_

#include "genome_index_data.hpp"
#include "genome_index_metadata.hpp"
#include "query_container.hpp"

#include <algorithm>
#include <cctype>   // for std::isalnum
#include <cstddef>  // for std::size_t
#include <cstdint>  // for std::uint32_t
#include <format>   // for std::vector(??)
#include <ranges>   // IWYU pragma: keep
#include <string>
#include <system_error>
#include <type_traits>  // for std::true_type
#include <utility>      // for std::to_underlying, std::unreachable
#include <variant>      // for std::hash
#include <vector>

namespace transferase {

struct genomic_interval;

/// @brief Data structures that correspond to reference genomes.
///
/// Genome indexes accelerate retrieval of methylation levels for
/// genomic intervals. When stored on disk a genomic_interval is in
/// the for of two files: one a binary data file and the other a JSON
/// format metadata file.
struct genome_index {
  /// @brief Filename extension that identifies genome index data files
  static constexpr auto data_extn = genome_index_data::filename_extension;

  /// @brief Filename extension that identifies genome index metadata files
  static constexpr auto meta_extn = genome_index_metadata::filename_extension;

  /// @brief The offsets of CpG sites in each chromosome.
  genome_index_data data;

  /// @brief A collection of metadata used to ensure this genome index
  /// is used properly across systems.
  genome_index_metadata meta;

  /// @brief This default constructor is automatically generated by the
  /// compiler.
  genome_index() = default;

  /// @brief Move constructor. Constructs a `genome_index` object by
  /// moving the provided genome_index_data and genome_index_metadata
  /// objects.
  genome_index(genome_index_data &&data, genome_index_metadata &&meta) :
    data{std::move(data)}, meta{std::move(meta)} {}

  /// @brief Explicitly deleted copy constructor. Copying of `genome_index`
  /// objects is not allowed.
  genome_index(const genome_index &) = delete;

  /// @brief Explicitly deleted copy assignment operator. Copy assignment of
  /// `genome_index` objects is not allowed.
  genome_index &
  operator=(const genome_index &) = delete;

  /// @brief Defaulted move constructor.
  genome_index(genome_index &&) noexcept = default;

  /// @brief Defaulted move assignment operator. Moves a `genome_index` object
  /// into another one. This operator is defaulted and allows move assignment.
  genome_index &
  operator=(genome_index &&) noexcept = default;

  /// @brief Generate a string representation in JSON format for a genome_index
  [[nodiscard]] auto
  tostring() const noexcept -> std::string {
    return std::format(R"json({{"meta": {}, "data": {}}})json", meta, data);
  }

  /// @brief Get a const reference to the associated metadata
  [[nodiscard]] auto
  get_metadata() const noexcept -> const genome_index_metadata & {
    return meta;
  }

  /// @brief Read a genome_index object from a filesystem.
  /// @param directory Directory where the genome_index files can be found.
  /// @param genome_name Read the index for the genome with this name.
  /// @param error An error code that is set for any error while reading.
  /// @return A genome_index object.
  [[nodiscard]] static auto
  read(const std::string &directory, const std::string &genome_name,
       std::error_code &error) noexcept -> genome_index;

#ifndef TRANSFERASE_NOEXCEPT
  /// @brief Read a genome_index object from a filesystem.
  /// @param directory Directory where the genome_index files can be found.
  /// @param genome_name Read the index for the genome with this name.
  /// @return A genome_index object.
  /// @throw std::system_error if any error is encountered while reading.
  static auto
  read(const std::string &directory,
       const std::string &genome_name) -> genome_index {
    std::error_code ec;
    auto index = read(directory, genome_name, ec);
    if (ec)
      throw std::system_error(ec);
    return index;
  }
#endif

  /// @brief Returns true iff a genome_index is internally consistent
  [[nodiscard]]
  auto
  is_consistent() const noexcept -> bool {
    return meta.index_hash == data.hash();
  }

  /// @brief Return the hash value for this genome_index by examining the
  /// index_hash variable in the meta member.
  [[nodiscard]]
  auto
  get_hash() const noexcept -> std::uint64_t {
    return meta.index_hash;
  }

  /// @brief Write this genome_index to the filesystem.
  /// @param directory The directory in which to write the genome index
  /// @param genome_name The name of the genome; determines filenames written
  /// @param error An error code that is set for any error while writing
  auto
  write(const std::string &directory, const std::string &genome_name,
        std::error_code &error) const noexcept -> void;

#ifndef TRANSFERASE_NOEXCEPT
  /// @brief Write this genome_index to disk
  /// @param directory The directory in which to write the genome index
  /// @param genome_name The name of the genome; determines filenames written
  /// @throw std::system_error if any error is encountered while writing
  auto
  write(const std::string &directory,
        const std::string &genome_name) const -> void {
    std::error_code ec;
    write(directory, genome_name, ec);
    if (ec)
      throw std::system_error(ec);
  }
#endif

  /// @brief Construct a query_container object for a vector of
  /// genomic_interval objects.
  /// @param intervals A vector of genomic_interval objects, assumed to be
  /// sorted.
  /// @return A query_container object.
  [[nodiscard]] auto
  make_query(const std::vector<genomic_interval> &intervals) const noexcept
    -> transferase::query_container;

  /// @brief Get the number of CpG sites for the reference genome corresponding
  /// to this genome_index
  [[nodiscard]] auto
  get_n_cpgs_chrom() const noexcept {
    return meta.get_n_cpgs_chrom();
  }

  /// @brief Get the number of CpG sites in each of a given set of genomic
  /// intervals.
  /// @param intervals A vector of genomic_interval, assumed to be sorted.
  /// @return A vector of counts of CpG sites in each interval.
  [[nodiscard]] auto
  get_n_cpgs(const std::vector<genomic_interval> &intervals) const noexcept
    -> std::vector<std::uint32_t> {
    return data.get_n_cpgs(meta, intervals);
  }

  /// @brief Get the number of CpG sites in each bin of a given size.
  /// @param bin_size Size of bins to consider.
  /// @return A vector of counts of CpG sites in each bin
  [[nodiscard]] auto
  get_n_cpgs(const std::uint32_t bin_size) const noexcept
    -> std::vector<std::uint32_t> {
    return data.get_n_cpgs(meta, bin_size);
  }

  /// @brief Get the number bins for the underlying reference genome
  /// @param bin_size Size of bins to consider.
  [[nodiscard]] auto
  get_n_bins(const std::uint32_t bin_size) const noexcept {
    return meta.get_n_bins(bin_size);
  }

  /// @brief Make a genome_index for a reference genome.
  /// @param genome_name A reference genome file in FASTA format,
  /// possibly gzipped.
  /// @param error An error code that is set for any error encountered
  /// while making the genome_index.
  /// @return A genome_index object.
  [[nodiscard]] static auto
  make_genome_index(const std::string &genome_file,
                    std::error_code &error) noexcept -> genome_index;

#ifndef TRANSFERASE_NOEXCEPT
  /// @brief Make a genome_index for a reference genome.
  /// @param genome_name A reference genome file in FASTA format, possibly
  /// gzipped.
  /// @return A genome_index object.
  /// @throw std::system_error if any error encountered while
  /// making the genome_index.
  [[nodiscard]] static auto
  make_genome_index(const std::string &genome_file) -> genome_index {
    std::error_code ec;
    auto index = make_genome_index(genome_file, ec);
    if (ec)
      throw std::system_error(ec);
    return index;
  }
#endif

  /// @brief Returns true iff the genome index files exist for the genome.
  /// @param directory The directory in which to look for files.
  /// @param genome_name The name of the genome for which to look for
  /// genome_index files.
  [[nodiscard]] static auto
  files_exist(const std::string &directory,
              const std::string &genome_name) noexcept -> bool;

  /// @brief Parse a genome name from a reference genome filename.
  /// @param filename A reference genome filename, including FASTA- or
  /// gzip-related suffixes.
  /// @param error An error code that is set if any error is
  /// encountered while parsing.
  [[nodiscard]] static auto
  parse_genome_name(const std::string &filename,
                    std::error_code &error) noexcept -> std::string;

#ifndef TRANSFERASE_NOEXCEPT
  /// @brief Parse a genome name from a reference genome filename.
  /// @param filename A reference genome filename, including FASTA- or
  /// gzip-related suffixes.
  /// @throw std::system_error if any error encountered while
  /// parsing.
  [[nodiscard]] static auto
  parse_genome_name(const std::string &filename) -> std::string {
    std::error_code ec;
    auto genome_name = parse_genome_name(filename, ec);
    if (ec)
      throw std::error_code(ec);
    return genome_name;
  }
#endif

  /// @brief Checks if a genome name has a valid format, meaning only
  /// alphanumeric or unerscore characters.
  /// @param genome_name The name of the genome to check
  [[nodiscard]] static auto
  is_valid_name(const std::string &genome_name) noexcept -> bool {
    return std::ranges::all_of(
      genome_name, [](const auto c) { return std::isalnum(c) || c == '_'; });
  }

  /// @brief List the names of genomes for which genome_index objects
  /// can be read from the given directory.
  /// @param directory The directory in which to look.
  /// @param error An error code if any error is encountered while
  /// searching the directory.
  /// @return A vector of strings holding genome names.
  [[nodiscard]] static auto
  list(const std::string &directory,
       std::error_code &error) noexcept -> std::vector<std::string>;

#ifndef TRANSFERASE_NOEXCEPT
  /// @brief List the names of genomes for which genome_index objects
  /// can be read from the given directory.
  /// @param directory The directory in which to look.
  /// @return A vector of strings holding genome names.
  /// @throws std::system_error if any error is encountered while
  /// searching the directory
  [[nodiscard]] static auto
  list_genome_indexes(const std::string &directory)
    -> std::vector<std::string> {
    std::error_code ec;
    auto indexes = list(directory, ec);
    if (ec)
      throw std::system_error(ec);
    return indexes;
  }
#endif
};

}  // namespace transferase

/// @brief Specialization of std::hash for genome_index
template <> struct std::hash<transferase::genome_index> {
  /// @brief Specializes std::hash for genome_index by wrapping the
  /// genome_index::get_hash function
  auto
  operator()(const transferase::genome_index &index) const noexcept
    -> std::size_t {
    return index.get_hash();
  }
};

/// @brief Enum for error codes related to genome index
enum class genome_index_error_code : std::uint8_t {
  ok = 0,
  invalid_genome_name = 1,
  failure_processing_fasta_file = 2,
};

template <>
struct std::is_error_code_enum<genome_index_error_code>
  : public std::true_type {};

struct genome_index_error_category : std::error_category {
  // clang-format off
  auto name() const noexcept -> const char * override {return "genome_index";}
  auto message(int code) const -> std::string override {
    using std::string_literals::operator""s;
    switch (code) {
    case 0: return "ok"s;
    case 1: return "invalid genome name"s;
    case 2: return "failure processing FASTA file"s;
    }
    std::unreachable();
  }
  // clang-format on
};

inline auto
make_error_code(genome_index_error_code e) -> std::error_code {
  static auto category = genome_index_error_category{};
  return std::error_code(std::to_underlying(e), category);
}

#endif  // LIB_GENOME_INDEX_HPP_
