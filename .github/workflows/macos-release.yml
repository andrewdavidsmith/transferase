name: Release on macOS

on:
  workflow_dispatch:

env:
  NCURSES_VERSION: 6.5
  OPENSSL_VERSION: 3.4.0

jobs:
  build-macos-releases:
    strategy:
      matrix:
        os: [macos-13, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Update Homebrew
        run: brew update
      - name: Install dependencies
        run: |
          brew install zlib
      - name: Build openssl
        run: |
          # Get the source and make a build dir
          cd /tmp
          wget -nv https://github.com/openssl/openssl/releases/download/openssl-${OPENSSL_VERSION}/openssl-${OPENSSL_VERSION}.tar.gz
          tar -xf openssl-${OPENSSL_VERSION}.tar.gz
          cd openssl-${OPENSSL_VERSION}
          mkdir build && cd build
          # Configure with all those options...
          cat ${GITHUB_WORKSPACE}/data/openssl_options.txt | \
          xargs ../Configure --prefix=/tmp/openssl_custom CC=gcc-14 CXX=g++-14
          # Build the library
          make -j4 \
          CFLAGS="-Wall -Os -fomit-frame-pointer -ffunction-sections -fdata-sections -mmacosx-version-min=13" \
          CXXFLAGS="-Wall -Os -fomit-frame-pointer -ffunction-sections -fdata-sections -mmacosx-version-min=13"
          make install
      - name: Build ncurses
        run: |
          # Get the source and make a build dir
          wget -nv https://ftp.gnu.org/gnu/ncurses/ncurses-${NCURSES_VERSION}.tar.gz && \
          tar -xf ncurses-${NCURSES_VERSION}.tar.gz && \
          cd ncurses-${NCURSES_VERSION} && \
          mkdir build && cd build
          # Configure the build
          ../configure --with-fallbacks=xterm \
          --disable-database \
          --enable-overwrite \
          --with-normal \
          --without-gpm \
          --without-cxx-binding \
          --disable-widec \
          --prefix=/tmp/ncurses_custom \
          CC=gcc-14 \
          CXX=g++-14
          # Copy the fallback defs into place
          cp ${GITHUB_WORKSPACE}/data/fallback.c ncurses
          # Build and install
          make -j4 \
          CC=gcc-14 \
          CXX=g++-14 \
          CFLAGS="-Wall -O2 -DNDEBUG -ffunction-sections -fdata-sections -mmacosx-version-min=13" \
          CXXFLAGS="-Wall -O2 -DNDEBUG -ffunction-sections -fdata-sections -mmacosx-version-min=13"
          make install
      - name: Configure transferase
        run: |
          cmake -B build \
          -DCMAKE_VERBOSE_MAKEFILE=on \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=13 \
          -DCMAKE_PREFIX_PATH="/tmp/ncurses_custom;/tmp/openssl_custom" \
          -DCMAKE_CXX_FLAGS="-I$(brew --prefix)/include" \
          -DCMAKE_EXE_LINKER_FLAGS="-L$(brew --prefix)/lib" \
          -DZLIB_LIBRARY=$(brew --prefix zlib)/lib/libz.a \
          -DUSE_XTERM=on \
          -DCMAKE_CXX_COMPILER=g++-14 \
          -DPACKAGE=on \
          -DCMAKE_BUILD_TYPE=Release
      - name: Get version number
        id: vars
        run: |
          awk '/^  VERSION [0-9.]+$/ {print "vn="$NF}' CMakeLists.txt >> "$GITHUB_OUTPUT"
          uname -m | awk '{print "arch="$0}' >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Build
        run: |
          cmake --build build -j4
      - name: Rename binaries
        run: |
          mv build/cli/transferase build/cli/transferase_$(uname -m)
          mv build/cli/xfr build/cli/xfr_$(uname -m)
          ls -lR build/cli
      - name: Upload the binaries
        uses: actions/upload-artifact@v4
        with:
          name: transferase-${{ steps.vars.outputs.vn }}-${{ matrix.os }}-${{ steps.vars.outputs.arch }}
          path: |
            build/cli/transferase_${{ steps.vars.outputs.arch }}
            build/cli/xfr_${{ steps.vars.outputs.arch }}
  package:
    needs: build-macos-releases
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - name: Update Homebrew
        run: brew update
      - name: Install dependencies
        run: |
          brew install zlib
      - name: Configure for CPack
        run: |
          cmake -B build \
          -DZLIB_LIBRARY=$(brew --prefix zlib)/lib/libz.a \
          -DPACKAGE=on
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
          pattern: transferase-*
          merge-multiple: false
      - name: Create universal binaries
        run: |
          ls -lR binaries
          lipo -create \
          binaries/transferase-*/transferase_* \
          -output build/cli/transferase
          lipo -create \
          binaries/transferase-*/xfr_* \
          -output build/cli/xfr
      - name: Prevent CPack regen
        run: |
          mv build/Makefile build/Makefile.orig
          python3 data/cpack_no_preinstall.py build/Makefile.orig > build/Makefile
      - name: Package
        run: |
          cpack -B build --config build/CPackConfig.cmake
      - name: Get version number
        id: get-vn
        run: |
          awk '/^  VERSION [0-9.]+$/ {print "vn="$NF}' CMakeLists.txt >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Upload the package files
        uses: actions/upload-artifact@v4
        with:
          name: transferase-${{ steps.get-vn.outputs.vn }}-macOS
          path: build/transferase-${{ steps.get-vn.outputs.vn }}*
